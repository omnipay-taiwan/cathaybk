<?php

namespace Omnipay\Cathaybk\Message;

use Omnipay\Common\Message\AbstractResponse;
use Omnipay\Common\Message\RedirectResponseInterface;

abstract class AbstractPurchaseResponse extends AbstractResponse implements RedirectResponseInterface
{
    /**
     * @return bool
     */
    public function isSuccessful()
    {
        return false;
    }

    /**
     * Get the transaction ID as generated by the merchant website.
     *
     * @return string
     */
    public function getTransactionId()
    {
        return $this->data['ORDERNUMBER'];
    }

    /**
     * Is the response successful?
     *
     * @return bool
     */
    public function isPending()
    {
        return true;
    }

    /**
     * Does the response require a redirect?
     *
     * @return bool
     */
    public function isRedirect()
    {
        return true;
    }

    /**
     * Get the required redirect method (either GET or POST).
     *
     * @return string
     */
    public function getRedirectMethod()
    {
        return 'POST';
    }

    /**
     * Get the response data.
     *
     * @return mixed
     */
    public function getData()
    {
        $data = $this->data;
        if (array_key_exists('CUBKEY', $data)) {
            unset($data['CUBKEY']);
        }

        return $data;
    }

    /**
     * Gets the redirect form data array, if the redirect method is POST.
     *
     * @return array
     */
    public function getRedirectData()
    {
        return [
            'strRqXML' => Helper::array2xml(['MERCHANTXML' => array_merge(
                ['CAVALUE' => $this->signature()],
                $this->getMsgId(),
                ['ORDERINFO' => $this->getData()]
            )]),
        ];
    }

    /**
     * @return array
     */
    protected function getMsgId()
    {
        return [];
    }

    /**
     * @return array
     */
    abstract protected function getSignatureKeys();

    /**
     * @return string
     */
    private function signature()
    {
        return Helper::signSignature($this->data, $this->getSignatureKeys());
    }
}
